// <auto-generated />
using System;
using ESchedule.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ESchedule.DataAccess.Migrations
{
    [DbContext(typeof(EScheduleDbContext))]
    partial class EScheduleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ESchedule.Domain.Lessons.LessonModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("LessonModel");
                });

            modelBuilder.Entity("ESchedule.Domain.Lessons.ScheduleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("StudyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudyGroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScheduleModel");
                });

            modelBuilder.Entity("ESchedule.Domain.Management.SettingsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("BreaksDurationTime")
                        .HasColumnType("time");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("LessonDurationTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StudyDayStartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .IsUnique();

                    b.ToTable("SettingsModel");
                });

            modelBuilder.Entity("ESchedule.Domain.ManyToManyModels.GroupsLessonsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudyGroupId");

                    b.ToTable("GroupsLessonsModel");
                });

            modelBuilder.Entity("ESchedule.Domain.ManyToManyModels.TeachersGroupsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudyGroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachersGroupsModel");
                });

            modelBuilder.Entity("ESchedule.Domain.ManyToManyModels.TeachersLessonsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachersLessonsModel");
                });

            modelBuilder.Entity("ESchedule.Domain.Users.GroupModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MasterTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxLessonsCountPerDay")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("MasterTeacherId")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("GroupModel");
                });

            modelBuilder.Entity("ESchedule.Domain.Users.PupilModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("PupilModel");
                });

            modelBuilder.Entity("ESchedule.Domain.Users.TeacherModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("TeacherModel");
                });

            modelBuilder.Entity("ESchedule.Domain.Lessons.ScheduleModel", b =>
                {
                    b.HasOne("ESchedule.Domain.Lessons.LessonModel", "Lesson")
                        .WithMany("RelatedSchedules")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESchedule.Domain.Users.GroupModel", "StudyGroup")
                        .WithMany("StudySchedules")
                        .HasForeignKey("StudyGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESchedule.Domain.Users.TeacherModel", "Teacher")
                        .WithMany("StudySchedules")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("StudyGroup");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ESchedule.Domain.Management.SettingsModel", b =>
                {
                    b.HasOne("ESchedule.Domain.Users.TeacherModel", "Creator")
                        .WithOne()
                        .HasForeignKey("ESchedule.Domain.Management.SettingsModel", "CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ESchedule.Domain.ManyToManyModels.GroupsLessonsModel", b =>
                {
                    b.HasOne("ESchedule.Domain.Lessons.LessonModel", "Lesson")
                        .WithMany("StudingGroups")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESchedule.Domain.Users.GroupModel", "StudyGroup")
                        .WithMany("StudingLessons")
                        .HasForeignKey("StudyGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("StudyGroup");
                });

            modelBuilder.Entity("ESchedule.Domain.ManyToManyModels.TeachersGroupsModel", b =>
                {
                    b.HasOne("ESchedule.Domain.Users.GroupModel", "StudyGroup")
                        .WithMany("GroupTeachers")
                        .HasForeignKey("StudyGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESchedule.Domain.Users.TeacherModel", "Teacher")
                        .WithMany("StudyGroups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudyGroup");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ESchedule.Domain.ManyToManyModels.TeachersLessonsModel", b =>
                {
                    b.HasOne("ESchedule.Domain.Lessons.LessonModel", "Lesson")
                        .WithMany("ResponsibleTeachers")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESchedule.Domain.Users.TeacherModel", "Teacher")
                        .WithMany("TaughtLessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ESchedule.Domain.Users.GroupModel", b =>
                {
                    b.HasOne("ESchedule.Domain.Users.TeacherModel", "MasterTeacher")
                        .WithOne("OwnGroup")
                        .HasForeignKey("ESchedule.Domain.Users.GroupModel", "MasterTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterTeacher");
                });

            modelBuilder.Entity("ESchedule.Domain.Users.PupilModel", b =>
                {
                    b.HasOne("ESchedule.Domain.Users.GroupModel", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ESchedule.Domain.Lessons.LessonModel", b =>
                {
                    b.Navigation("RelatedSchedules");

                    b.Navigation("ResponsibleTeachers");

                    b.Navigation("StudingGroups");
                });

            modelBuilder.Entity("ESchedule.Domain.Users.GroupModel", b =>
                {
                    b.Navigation("GroupTeachers");

                    b.Navigation("Members");

                    b.Navigation("StudingLessons");

                    b.Navigation("StudySchedules");
                });

            modelBuilder.Entity("ESchedule.Domain.Users.TeacherModel", b =>
                {
                    b.Navigation("OwnGroup")
                        .IsRequired();

                    b.Navigation("StudyGroups");

                    b.Navigation("StudySchedules");

                    b.Navigation("TaughtLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
